(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{300:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://ts.xcatliu.com/introduction/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TS入门"),a("OutboundLink")],1),t._v("\n专业流程平台Vue+TypeScript实践分享\n项⽬是基于BPMN的规范来做的⼀个流程设计器，前端的技术框架基于Vue，使⽤ TypeScript 来编写\n \n什么是TypeScript？\n• TypeScript是⼀种由微软开发的开源、跨平台的编程语⾔。它是JavaScript的超集，最终会被编译 为JavaScript代码。\n• TypeScript添加了可选的静态类型系统和很多尚未正式发布的ECMAScript新特性。\n• TypeScript⽀持任意浏览器，任意环境，任意系统并且是开源的。\n \n优缺点:")]),t._v(" "),a("h2",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点：")]),t._v(" "),a("h3",{attrs:{id:"_1-静态类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-静态类型"}},[t._v("#")]),t._v(" 1.静态类型")]),t._v(" "),a("p",[t._v("我们都知道，JavaScript是⼀个弱类型，且是动态类型的脚本语⾔，什么变量都可以var⼀下，变   量还可以随便赋值，函数的返回值也可以是任意类型。导致代码报错是在运⾏阶段，⽽TypeScript则是静态类型，如果出错在代码编译时边会提⽰报错。\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003563445-15698601-8168-4e40-abdd-649813cfbab1.png#align=left&display=inline&height=1160&name=image.png&originHeight=1160&originWidth=1734&size=1218046&status=done&style=none&width=1734",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_2-方便阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-方便阅读"}},[t._v("#")]),t._v(" 2.⽅便阅读")]),t._v(" "),a("p",[t._v("类型系统实际上也是⼀个⾮常实⽤的⽂档，⼤部分的函数通过查看类型的定义就可以知道如何使\n⽤，并且在VSCode（此处使⽤VSCode来代表所有代码编辑器）⾥⾯去编写TypeScript时，VSCode 会根据你当前的上下⽂，把你能⽤的类、变量、⽅法和关键字都提⽰出来，⼀⽬了然。不仅如此， TypeScript的特性还增强了VSCode的功能，包括代码补全、接⼝提⽰和点击跳转等等\n如下图，我们可以很清晰的通过⿏标选中查看其属性的数据结构：\n "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003670578-92a4f5b0-e391-4db4-a508-5e95e2e20d0d.png#align=left&display=inline&height=655&name=image.png&originHeight=1310&originWidth=1728&size=3097384&status=done&style=none&width=864",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_3-减少bug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-减少bug"}},[t._v("#")]),t._v(" 3. 减少bug")]),t._v(" "),a("p",[t._v("随着的项⽬的迭代，我们可能会常常遗忘该变量或者函数的返回值类型，再加之JavaScript本⾝     具有的隐式转化，让我们对类型的判断更加的困难，难以控制。后期回顾数据类型⼤⼤影响开发效率，这⾥要加⼀个类型判断，那⾥也要进⾏⼀次类型转换。\n如下图中，TypeScript的类型推断，可以让我们在编码时候⽴即发现⾃⼰的类型错误。我们已经   看到了VSCode等IDE都会做出类型检查，可以将很多类型错误直接提⽰出来，这⼀点在多⼈开发，和    维护⼤型项⽬时尤为重要。项⽬复杂，函数和变量繁多时经常出现⼀个⼈改了⼀点点东西，导致项⽬崩溃的情况，在TypeScript上⾯这种情况会⼤⼤减少。\n但是值得注意的是，使⽤TypeScript也只能避免⼀部分错误，不能⼀劳永逸，平时遵守严格的编    码规范，配置ESLint，代码review，以及编写单元测试等环节依然很重要！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003688968-f3ea0cd7-11cf-4eac-b5aa-95301eb21707.png#align=left&display=inline&height=293&name=image.png&originHeight=586&originWidth=1862&size=782017&status=done&style=none&width=931",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_4-社区活跃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-社区活跃"}},[t._v("#")]),t._v(" 4. 社区活跃")]),t._v(" "),a("p",[t._v("继Angular之后，React，Vue都相继开始⽀持TypeScript，尤其是2019年更是TypeScript爆发性     增⻓的⼀年，⼤部分第三⽅库都开始有提供给TypeScript的类型定义⽂件。")]),t._v(" "),a("h2",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点：")]),t._v(" "),a("h3",{attrs:{id:"_1-学习成本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-学习成本"}},[t._v("#")]),t._v(" 1. 学习成本")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5edd8ad8f265da76fc45362c#heading-52",target:"_blank",rel:"noopener noreferrer"}},[t._v("了不起的 TypeScript ⼊⻔教程"),a("OutboundLink")],1),t._v("\nTypeScript因为是在JavaScript的基础上扩展，所以真正的学习成本并不⼤，但毕竟是静态类    型，⽽且需要理解接⼝、泛型、类、枚举类型新的概念，对于习惯了JavaScript语⾔的⼈来说很难习      惯，导致了很多同学听⻅TypeScript的第⼀反应都是拒绝，尤其是在看了⽤TypeScript编写的项⽬    后。⽽且如果你想要在现有项⽬中充分体验TypeScript，你⼜将⾯临异常⾼昂的切换成本。")]),t._v(" "),a("h3",{attrs:{id:"_2-开发速度降低"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-开发速度降低"}},[t._v("#")]),t._v(" 2. 开发速度降低")]),t._v(" "),a("p",[t._v("虽然TypeScript提供了any类型，但是使⽤它的同时也失去了TypeScript的优势，建议尽量少使⽤。虽然类型系统⾃带⽂档，可以省去很多编写注释的时间，但是为所有值填上类型过程有点痛苦。\n我们每⼀个数据对象都需要先定义好数据类型，从⽽在需要的是要导⼊引⽤进⾏约束变量或者函数返\n回值，如下图所⽰。接⼝定义：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003787460-bd496c1a-c372-4cdb-8d82-ac2301b67d19.png#align=left&display=inline&height=539&name=image.png&originHeight=1078&originWidth=1708&size=1922355&status=done&style=none&width=854",alt:"image.png"}})]),t._v(" "),a("p",[t._v("接⼝引⼊：\n "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003809285-64b05a5e-5517-45ff-a364-030cbd0b7928.png#align=left&display=inline&height=417&name=image.png&originHeight=834&originWidth=1668&size=1249396&status=done&style=none&width=834",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_3-部分第三方库的兼容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-部分第三方库的兼容"}},[t._v("#")]),t._v(" 3. 部分第三⽅库的兼容")]),t._v(" "),a("p",[t._v("随着TypeScript的愈加⽕爆，很多依赖包都⽀持了TypeScript，但是依然有⼀部分还没有⽀持，如果你的项⽬刚好依赖了它们⽽你还想使⽤TypeScript的话，那你就需要为他添加⼀个d.ts⽂件才可以使⽤，添加的过程较为⿇烦.")]),t._v(" "),a("h3",{attrs:{id:"_4-需要编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-需要编译"}},[t._v("#")]),t._v(" 4. 需要编译")]),t._v(" "),a("p",[t._v("JavaScript是标准，是可以直接在浏览器运⾏的，但TypeScript不能直接运⾏需要经过编译，⽣成JavaScript才可以运⾏。")]),t._v(" "),a("h2",{attrs:{id:"我们对typescript的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们对typescript的使用"}},[t._v("#")]),t._v(" 我们对TypeScript的使⽤")]),t._v(" "),a("h3",{attrs:{id:"_1-类型约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型约束"}},[t._v("#")]),t._v(" 1.  类型约束")]),t._v(" "),a("p",[t._v("对已确定的数据结构定义接⼝，在定义或者引⽤相同数据结构时引⽤接⼝类型约束，防⽌数据类型赋值和函数返回值错误。\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003850142-0c75142f-45bb-4934-9350-e4f220068947.png#align=left&display=inline&height=566&name=image.png&originHeight=1132&originWidth=1644&size=1380264&status=done&style=none&width=822",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_2-枚举定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-枚举定义"}},[t._v("#")]),t._v(" 2.  枚举定义")]),t._v(" "),a("p",[t._v("对⼀些固定值使⽤枚举定义，可以在让其他同学在阅读代码、后期维护时可以⻅名知意，降低阅读代码成本。enum类型是对JavaScript标准数据类型的⼀个补充。   像C#等其它语⾔⼀样，使⽤枚举类型可以为⼀组数字或字符串赋予友好的名字。\n \n "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003876216-63978e29-faed-4ce3-a233-cf3338e22b0e.png#align=left&display=inline&height=364&name=image.png&originHeight=728&originWidth=1696&size=690338&status=done&style=none&width=848",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_3-bpmn解析模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-bpmn解析模式"}},[t._v("#")]),t._v(" 3.   BPMN解析模式")]),t._v(" "),a("p",[t._v("我们在bpmn.js本⾝⾃⾝api解析对象与Vue的data层之间建⽴了⼀层数据解析层，并且会根据Vue 所需的data层数据结构对每个bpmn结构元素设计出较为合理的数据结构，以便于视图层渲染和复⽤。在此解析层所有的数据都会预先在typing.fixflow.d.ts⽂件中定义好，⽤来约束解析出来的结果是我们所必须数据结构。这样的设计可以避免⼀些数据层级过深导致某些属性解析缺失，或者在后期迭代的过程中数据结构变更，⽽未能将所有的引⽤更替。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003923670-0f205e05-adfb-4fdd-94bc-7cf43b523f6f.png#align=left&display=inline&height=735&name=image.png&originHeight=1470&originWidth=2120&size=2645828&status=done&style=none&width=1060",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_4-class-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-class-style"}},[t._v("#")]),t._v(" 4.   class-style")]),t._v(" "),a("p",[t._v("由于vue对typescript⽀持的装饰器(库)，本项⽬引⽤vue-property-decorator(依赖vue-class- component)进⾏组件编写。通过该插件可以使⽤类的写法替换原本组件的对象写法，让组件的编写    更为优雅。\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608003972539-d387ec9e-f282-49b3-bf73-238cfd131c17.png#align=left&display=inline&height=778&name=image.png&originHeight=1556&originWidth=2082&size=2533701&status=done&style=none&width=1041",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_5-props类型约定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-props类型约定"}},[t._v("#")]),t._v(" 5.   Props类型约定")]),t._v(" "),a("p",[t._v("在封装组件时候会对传⼊的值进⾏类型约定，可以尽量避免因传⼊的值数据结构与组件内部处理不\n⼀致，导致组件内渲染出错。\n "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/292785/1608004038846-0941f56c-7dd4-4f42-9d52-48519d46c31c.png#align=left&display=inline&height=626&name=image.png&originHeight=1252&originWidth=2308&size=2384614&status=done&style=none&width=1154",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"_6-不足"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-不足"}},[t._v("#")]),t._v(" 6.    不⾜")]),t._v(" "),a("p",[t._v("a.       许多地⽅没有使⽤TS的新特性")]),t._v(" "),a("p",[t._v("b.       依旧有许多地⽅使⽤any类型")]),t._v(" "),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h4",{attrs:{id:"函数重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数重载"}},[t._v("#")]),t._v(" 函数重载")]),t._v(" "),a("h5",{attrs:{id:"_2个或2个以上的同名普通函数-但参数不一样-这时会出现函数重载的情况。ts中重载-通过为一个函数提供多个函数类型定义走多种功能目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2个或2个以上的同名普通函数-但参数不一样-这时会出现函数重载的情况。ts中重载-通过为一个函数提供多个函数类型定义走多种功能目的"}},[t._v("#")]),t._v(" 2个或2个以上的同名普通函数，但参数不⼀样，这时会出现函数重载的情况。TS中重载,通过为⼀个函数提供多个函数类型定义⾛多种功能⽬的")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 普通js \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("{}\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" css"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("{} "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 会替换上⾯的⽅法 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" TS 中 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" getInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v("{} \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" getInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number{} \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" getInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any{} "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 根据参数不同，⾛不同逻辑\n")])])]),a("h4",{attrs:{id:"类里面的三种修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类里面的三种修饰符"}},[t._v("#")]),t._v(" 类⾥⾯的三种修饰符")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("public 共有 类内部、⼦类、类外部都可以访问 \nprotected 保护 类⾥、⼦类可以访问，类外部不可以访问 \nprivate 私有 类⾥可以访问，⼦类和类外不可访问\n")])])]),a("h4",{attrs:{id:"ts抽象类-提供给其他类继承的基础类-必须实现抽象类继承-否则报错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts抽象类-提供给其他类继承的基础类-必须实现抽象类继承-否则报错"}},[t._v("#")]),t._v(" TS抽象类：提供给其他类继承的基础类，必须实现抽象类继承，否则报错")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("abstract class Animal { "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 基类 \n\tpublic "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { \n  \tthis."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  }\n  abstract eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 定义⽅法 \n} \nclass Cat extends Animal {\n  constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {\n  \tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  }\n  eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {\n  \txxxx \n  } \n} \nvar c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Cat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nc.eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 必须调⽤定义⽅法，否则报错\n")])])]),a("h4",{attrs:{id:"接口的概念-对json约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口的概念-对json约束"}},[t._v("#")]),t._v(" 接⼝的概念：对JSON约束")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("interface FullName { \n  firstName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n}\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" printName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" FullName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" FullName 对应上⾯定义 \n\tconsole."),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(". firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(". lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n}\n")])])]),a("h4",{attrs:{id:"加密函数类型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加密函数类型接口"}},[t._v("#")]),t._v(" 加密函数类型接⼝")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("interface encrypt {\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 约束函数：传值和返回值，可做批量约束\n}\nvar md5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" encrypt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" { \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("key")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n} \nmd5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 'zhangsan'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"类-类型接口-常用-类似于抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-类型接口-常用-类似于抽象类"}},[t._v("#")]),t._v(" '类'类型接⼝，常⽤，类似于抽象类")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("interface Animal { "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 实现这个接⼝，必须有"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v("和eat这个标准 \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("void"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n} \nclass Dog implements Animal { \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 必须存在 \n  constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { \n  this."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(" \n  } \n  eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 必须存在 \n  \t\t"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" xxxx "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n  } \n} \nvar d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new Dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'wang'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \nd.eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"接口的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口的继承"}},[t._v("#")]),t._v(" 接⼝的继承")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("interface Animal { \n\teat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("void \n} \ninterface Person extends Animal { \n\twork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("void \n} \n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 接⼝继承接⼝\n class Web implements Person {\n   public "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { \n   \t\tthis."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),t._v(" \n   } \n   eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("{ xxx }\n   work"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { xxx } \n } \n class Programer { \n   constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { \n   \t\tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n   } \n   coding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { xxx } \n } \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" extends继承普通构造函数可以直接调⽤私有函数coding \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" implements配合interface接⼝，定义eat和wrok⽅法\nclass Web extends Programer implements Person { \n\tconstructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { \n  \tsuper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  } \n  eat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("{ xxx } \n  work"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" { xxx } \n}\n")])])]),a("h4",{attrs:{id:"interface-与-type-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-与-type-区别"}},[t._v("#")]),t._v(" interface 与 type 区别")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5c2723635188252d1d34dc7d#heading-11",target:"_blank",rel:"noopener noreferrer"}},[t._v("Typescript 中的 interface 和 type 到底有什么区别"),a("OutboundLink")],1),t._v("\n相同点：\na.       都可以描述⼀个对象或者函数\nb.       都允许拓展（extends）\nc.        都可以被类实现（implements）\n 不同点：")]),t._v(" "),a("p",[t._v("a.       type 可以声明基本类型别名，联合类型，元组等类型\nb.       interface 能够声明合并")]),t._v(" "),a("h4",{attrs:{id:"泛型-可以支持不特定的数据类型-要求-传入的参数和返回的参数必须一致"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型-可以支持不特定的数据类型-要求-传入的参数和返回的参数必须一致"}},[t._v("#")]),t._v(" 泛型：可以⽀持不特定的数据类型，要求：传⼊的参数和返回的参数必须⼀致")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" getData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T { \n \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 返回值也必须是定义类型T \n } \n getData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" T是"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v("，所以传参也必须是字符串 \n getData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345")]),t._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" T是number，所以传参不是字符串，报错\n")])])]),a("p"),t._v(" "),a("h4",{attrs:{id:"泛型类-最小堆算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型类-最小堆算法"}},[t._v("#")]),t._v(" 泛型类：最⼩堆算法")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v("class MinClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" { \n  public list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T[] "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" []"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("void { \n  \tthis.list.push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  } \n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T { \n    var minNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" this.list["),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("] \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" minNum \n  } \n} \nvar m1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new MinClass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 定义T为number类型 \nm1.add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 传参也为数字类型 \nmi."),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 返回值也为数字类型\n")])])]),a("h4",{attrs:{id:"泛型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[t._v("#")]),t._v(" 泛型接⼝")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 第⼀种写法： \ninterface config { \n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n} \nvar getData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T { \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value \n} \ngetData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'张三'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 通过 \ngetData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("报错 \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 第⼆种写法： \ninterface config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" { \n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n} \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" getData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("T { \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n} \nvar myData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getData \nmyData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'abc'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 通过 \nmyData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 报错\n")])])]),a("p"),t._v(" "),a("h4",{attrs:{id:"类型编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型编程"}},[t._v("#")]),t._v(" 类型编程")]),t._v(" "),a("h5",{attrs:{id:"typescript-进阶⸺类型编程-通过typescript操作符-把类型当作参数进行逻辑处理-从而获得新的类型的过程称为类型编程。其中大部分都是通过泛型来引入-因此泛型是ts类型编程的基础。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-进阶⸺类型编程-通过typescript操作符-把类型当作参数进行逻辑处理-从而获得新的类型的过程称为类型编程。其中大部分都是通过泛型来引入-因此泛型是ts类型编程的基础。"}},[t._v("#")]),t._v(" （   "),a("a",{attrs:{href:"https://bytedance.feishu.cn/docs/doccnFqnqcIlHHa6TGqukjD9zAh",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript  进阶⸺类型编程"),a("OutboundLink")],1),t._v("）：通过TypeScript操作符，把类型当作参数进⾏逻辑处理，从⽽获得新的类型的过程称为类型编程。其中⼤部分都是通过泛型来引⼊，因此泛型是TS类型编程的基础。")]),t._v(" "),a("h4",{attrs:{id:"声明类型参数有三种-泛型-、in映射、infer待推断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明类型参数有三种-泛型-、in映射、infer待推断"}},[t._v("#")]),t._v(" 声明类型参数有三种：泛型<>、in映射、infer待推断")]),t._v(" "),a("h4",{attrs:{id:"同态转换-同态转换会复制原有的所有属性的所有修饰词-在此基础上允许额外的增加新的属性修饰词。两个代数结构保持了结构不变的映射-则称这两个代数结构是同态的。ts中类型索引和类型映射-是同态的。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同态转换-同态转换会复制原有的所有属性的所有修饰词-在此基础上允许额外的增加新的属性修饰词。两个代数结构保持了结构不变的映射-则称这两个代数结构是同态的。ts中类型索引和类型映射-是同态的。"}},[t._v("#")]),t._v(" 同态转换：同态转换会复制原有的所有属性的所有修饰词，在此基础上允许额外的增加新的属性修饰词。两个代数结构保持了结构不变的映射，则称这两个代数结构是同态的。TS中类型索引和类型映射         是同态的。")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Common")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" { [K "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("in")]),t._v(" keyof T]"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T[K] }\n")])])]),a("p",[t._v("条件分布式\n当满⾜条件，\na.       存在联合类型作为输⼊\nb.       有条件运算extends\nc.        联合类型所指的⼊参必须是裸类型（没有被其他类型包裹）")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A | B | C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" | "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" | "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" C"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C extends U ? X "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("官⽅类型递归例⼦：")]),t._v(" "),a("div",{staticClass:"language-basic extra-class"},[a("pre",{pre:!0,attrs:{class:"language-basic"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" LinkedList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" { "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" LinkedList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" }"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nclass Person { \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" \n} \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" LinkedList"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v("."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v("."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("next")]),t._v("."),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h1",{attrs:{id:"综合考虑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#综合考虑"}},[t._v("#")]),t._v(" 综合考虑")]),t._v(" "),a("p",[t._v("在开始专业流程平台项⽬之前我们主要是基于以下⼏点考虑\n1.       新项⽬。从头开发，没有重构⽼代码的成本。")]),t._v(" "),a("p",[t._v("2.       对新技术的尝试。组内⼈员对新技术的热忱度都很⾼，希望通过⼀个项⽬来实践TypeScript。\n3.       多⼈协作。专业流程平台项⽬庞⼤，且BPMN⽂件解析的数据需要来回传递和修改。\n4.       不同功能模块之间数据获取和传递。对于类型系统的需求⼤，每个⼈来编写时都可以避免类型错误，并且⽅便获取参数类型进⾏操作。\n5.       代码规范化。所以代码越规范越好，TypeScript便于理解，并配有详细的注释。\n6.       接⼝返回值固定类型。可以更好的进⾏类型推断。\n7.       项⽬持续迭代和维护。使⽤TypeScript可以⽅便⼤家阅读和后续扩展、重构。")]),t._v(" "),a("h1",{attrs:{id:"结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[t._v("#")]),t._v(" 结论")]),t._v(" "),a("p",[t._v("个⼈认为专业流程平台项⽬接⼊TypeScript是⼀个⾮常好的技术⽅案，⽽且从 Vue2.5 之后，Vue 对 TypeScript有更好的⽀持。在本项⽬的实践开发过程中，我觉得以下⼏点是需要注意并遵守的：\na.       对定义的变量、参数以及函数的返回值进⾏接⼝类型约束\nb.       对与⼀些需要固定的值，可以使⽤枚举给其⻅名知意的变量名\nc.        在使⽤class⻛格封装组件时候，我们在props传值时需要对传⼊组件内部值进⾏类型约定\nd.       能不⽤any类型定义变量类型时，我们则不⽤\ne.       我们尽量使⽤TS带了的新特性，让代码更为的优雅，例如：可选链 ?. 、双问号操作符 ?? 等\n \n是否使⽤TypeScript，我们认为在做出选择之前，你需要认真的衡量⼀下投⼊产出⽐， TypeScript带来的优势是否对当前的项⽬有很⼤提升，是否值得花费⼤量的时间去对现有项⽬进⾏重     构，值得注意的⼀点是，不管TypeScript最终会不会被应⽤到项⽬中，你都应该学会掌握它。\n最后，对于取舍问题，我们感觉是：如果你的项⽬是⼤型项⽬，第三⽅库，或者其他需要持续维护的项⽬，上TypeScript吧；如果你的项⽬是活动，分享⻚⾯，等短周期并且不需要持续维护的项\n⽬，想⽤哪个⽤哪个。")]),t._v(" "),a("h1",{attrs:{id:"视频回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视频回顾"}},[t._v("#")]),t._v(" 视频回顾")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.feishu.cn/space/file/boxcnNIDZfaPYLA1u1IML2NVC7U",target:"_blank",rel:"noopener noreferrer"}},[t._v("专业流程平台Vue+TypeScript实践分享.mp4"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.yuque.com/attachments/yuque/0/2020/pdf/292785/1608013141405-43111e8e-88ff-4ba7-b1bc-b53437308737.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("专业流程平台Vue+TypeScript实践分享.pdf"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"ts小技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts小技巧"}},[t._v("#")]),t._v(" ts小技巧")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://cy188.github.io/2021/04/09/2-TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-4.2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文文档"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("Partial")]),t._v("\n将传入的属性变为可选项")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface IPeople {\n    title: string;\n    name: string;\n}\n\nconst people: Partial<IPeople> = {\n    title: 'Delete inactive users'\n};\n")])])]),a("p",[a("strong",[t._v("Record<K, T>")]),t._v("\n类型参数K提供了对象属性名联合类型，类型参数T提供了对象属性的类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface Person {\n  name: string;\n}\n\n// 将x, y 作为Person的key\ntype Peoples = Record<\"x\" | \"y\", Person>;\n\nconst P: Peoples = {\n    x: {\n        name: '张三'\n    },\n    y: {\n        name: '李四'\n    }\n}\n")])])]),a("p",[t._v("**Readonly **\n把传入的类型变为只读状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface Person {\n  name: string;\n  age: number;\n}\n\nconst p: Readonly<Person> = {\n    name: '张三',\n    age: 22\n}\n\np.name = '李四'; // 无法分配到 \"name\" ，因为它是只读属性\n")])])]),a("p",[a("strong",[t._v("Required")]),t._v("\n把传入的类型变为必填状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface Person {\n    name?: string;\n    age?: number;\n}\n\nconst p: Required<Person> = {\n    name: '张三',\n    age: 22\n}\n")])])]),a("p",[a("strong",[t._v("Pick<T, S>")]),t._v("\n在 T 中，过滤掉非 S 的类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface IPerson {\n    name: string;\n    age: number;\n}\n\ntype TP = Pick<IPerson, 'name'>;\n\nconst p: TP = {\n    age: 22, // 对象文字可以只指定已知属性，并且“age”不在类型“TP”中\n    name: '张三'\n}\n")])])]),a("p",[a("strong",[t._v("Omit<T, K>")]),t._v("\n在 T 中删除对应的 K")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface IPerson {\n    name: string;\n    age: number;\n}\n\ntype TP = Omit<IPerson, 'age'>;\n\nconst p: TP = {\n    name: '张三'\n}\n")])])]),a("p",[a("strong",[t._v("Exclude<T, U>")]),t._v("\n该工具类型能够从类型T中剔除所有可以赋值给类型U的类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('type T0 = Exclude<"a" | "b" | "c", "a">;\n// 相当于 type T0 = "b" | "c"\n\ntype T1 = Exclude<"a" | "b" | "c", "a" | "b">;\n// 相当于 type T1 = "c"\n\ntype T2 = Exclude<string | number | (() => void), Function>;\n// 相当于 type T2 = string | number\n')])])]),a("p",[a("strong",[t._v("Extract<T, U>")]),t._v("\n“Extract<T, U>”工具类型与“Exclude<T, U>”工具类型是互补的，它能够从类型T中获取所有可以赋值给类型U的类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type T0 = Extract<'a' | 'b' | 'c', 'a' | 'f'>;\n// 相当于 type T0 = 'a';\n\ntype T1 = Extract<string | (() => void), Function>;\n// 相当于 type T1 = () => void;\n\ntype T2 = Extract<string | number, boolean>;\n// 因为没有交集，相当于 type T2 = never;\n")])])]),a("p",[a("strong",[t._v("ReturnType")]),t._v("\n该工具类型能够获取函数类型T的返回值类型")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\ntype "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ReturnType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { a: string; b: number }")]),t._v("\ntype "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ReturnType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);