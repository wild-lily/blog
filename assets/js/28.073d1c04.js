(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{301:function(t,a,i){"use strict";i.r(a);var e=i(14),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("减少浏览器的负担")]),t._v(" "),a("p",[t._v("JS的内存空间分为栈(stack)、堆(heap)、池(一般也会归类为栈中)。\n其中栈存放变量，堆存放复杂对象，池存放常量，所以也叫常量池。")]),t._v(" "),a("h2",{attrs:{id:"内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[t._v("#")]),t._v(" 内存")]),t._v(" "),a("p",[t._v("基本类型")]),t._v(" "),a("ol",[a("li",[t._v("Sting")]),t._v(" "),a("li",[t._v("Number")]),t._v(" "),a("li",[t._v("Boolean")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("Symbol")])]),t._v(" "),a("h3",{attrs:{id:"栈内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈内存"}},[t._v("#")]),t._v(" 栈内存")]),t._v(" "),a("h6",{attrs:{id:"连续-普通类型存储-值和变量本身放在一起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连续-普通类型存储-值和变量本身放在一起"}},[t._v("#")]),t._v(" 连续  普通类型存储  值和变量本身放在一起")]),t._v(" "),a("p",[t._v("基本数据类型保存在栈内存中，因为基本数据类型占用空间小、大小固定，通过按值来访问，属于被频繁使用的数据")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/292785/1638255699478-a017607b-2eb2-41f2-a804-d2b214825e06.png#clientId=u0af62612-21ca-4&from=paste&height=479&id=u6ba7b618&name=image.png&originHeight=958&originWidth=1574&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145914&status=done&style=none&taskId=ubdcfa520-872d-4861-99c5-3d7c9d947cf&title=&width=787",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"堆内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆内存"}},[t._v("#")]),t._v(" 堆内存")]),t._v(" "),a("p",[t._v("不连续 对象本身会放在堆内存里面 变量本身放在栈内存里 指向堆内存的地址")]),t._v(" "),a("p",[t._v("Array,Function,Object...可以认为除了上文提到的基本数据类型以外，所有类型都是引用数据类型。\n引用数据类型存储在堆内存中，因为引用数据类型占据空间大、大小不固定。 如果存储在栈中，将会影响程序运行的性能； 引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。 当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体\nrensh\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/292785/1638255610108-322cc87b-2d1c-47e3-9cab-19874c2cb5ef.png#clientId=u0af62612-21ca-4&from=paste&height=634&id=u5096330c&name=image.png&originHeight=1268&originWidth=2366&originalType=binary&ratio=1&rotation=0&showTitle=false&size=758225&status=done&style=none&taskId=u17f21f55-3864-4598-b82e-dc78c93ad2d&title=&width=1183",alt:"image.png"}}),t._v(" "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/292785/1639114497763-2871c89a-5862-4bde-8977-0aa2e1b89271.png#clientId=u0cf11d8e-aa02-4&from=paste&height=377&id=ub421448c&name=image.png&originHeight=377&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86874&status=done&style=none&taskId=u5817c86d-d784-46b2-b5bb-4e717e14dcd&title=&width=653",alt:"image.png"}})]),t._v(" "),a("h2",{attrs:{id:"认识v8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识v8"}},[t._v("#")]),t._v(" 认识V8")]),t._v(" "),a("ul",[a("li",[t._v("V8 —— 是 Google 发布的主流的开源 JavaScript 引擎，采用 C++ 编写。采用即时编译，直接翻译成机器语言，并且使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，JavaScript程序在V8引擎下的运行速度媲美二进制程序。")]),t._v(" "),a("li",[t._v("V8内存设限：这么设限为了浏览器使用内存足够，内部还有垃圾运行机制，时间也在用户感知的合理范围\n"),a("ul",[a("li",[t._v("64bit操作系统上不超过1.5G")]),t._v(" "),a("li",[t._v("32bit操作系统上不超过800M")])])])]),t._v(" "),a("ol",[a("li",[t._v("64位下是1.4G")]),t._v(" "),a("li",[t._v("32位下700MB")]),t._v(" "),a("li",[t._v("根据浏览器不同会有些许的扩容  node情况下会有C++内存扩容")])]),t._v(" "),a("p",[t._v("设限原因：")]),t._v(" "),a("ul",[a("li",[t._v("1.4G对于浏览器脚本来说足够使用")]),t._v(" "),a("li",[t._v("回收是阻塞式的 垃圾回收会中断代码的执行 必须要限制")])]),t._v(" "),a("p",[t._v("这么设限为了浏览器使用内存足够，内部还有垃圾运行机制，时间也在用户感知的合理范围")]),t._v(" "),a("h2",{attrs:{id:"v8垃圾回收策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8垃圾回收策略"}},[t._v("#")]),t._v(" V8垃圾回收策略")]),t._v(" "),a("p",[t._v("程序的使用过程中，可以分为 "),a("strong",[t._v("原始类型数据")]),t._v(" 和 "),a("strong",[t._v("对象类型数据")]),t._v(" 。\n原始数据都是由程序语言自身控制的，这里的回收还是指"),a("strong",[t._v("主要存活在堆区的对象数据")]),t._v("，这个过程是离不开内存操作的，V8也是对内存做了上限，那在这种情况下是如何对垃圾进行回收的?")]),t._v(" "),a("ul",[a("li",[t._v("采用分代回收的思想")]),t._v(" "),a("li",[t._v("内存分为新生代存储区、老生代存储区")]),t._v(" "),a("li",[t._v("针对不同代采用不同的算法")])]),t._v(" "),a("p",[t._v("所以V8中会用到更多的GC算法，这里对GC算法不懂的还有这篇文章中说到的标记清除、整理等算法详细"),a("a",{attrs:{href:"https://segmentfault.com/a/1190000038461201",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000038461201"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"v8常用的gc算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8常用的gc算法"}},[t._v("#")]),t._v(" V8常用的GC算法")]),t._v(" "),a("ul",[a("li",[t._v("分代回收 (一定会用)")]),t._v(" "),a("li",[t._v("空间复制")]),t._v(" "),a("li",[t._v("标记清除")]),t._v(" "),a("li",[t._v("标记整理")]),t._v(" "),a("li",[t._v("标记增量 (提高效率用)")])]),t._v(" "),a("h2",{attrs:{id:"v8的分代回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8的分代回收"}},[t._v("#")]),t._v(" V8的分代回收")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新生代")]),t._v(" —— 就是指存活时间较短的对象，例如：一个局部作用域中，只要函数执行完毕之后变量就会回收。")]),t._v(" "),a("li",[a("strong",[t._v("老生代")]),t._v(" —— 就是指存活时间较长的对象，例如：全局对象，闭包变量数据。")])]),t._v(" "),a("h3",{attrs:{id:"v8的内存分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8的内存分配"}},[t._v("#")]),t._v(" V8的内存分配")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/292785/1638257448458-eceb0f05-b280-4e4f-bd6b-e6c9aa7278be.png#clientId=u0af62612-21ca-4&from=paste&height=274&id=u183bca8e&name=image.png&originHeight=548&originWidth=2308&originalType=binary&ratio=1&rotation=0&showTitle=false&size=320893&status=done&style=none&taskId=uc2f18846-c5bc-4d42-bc9d-90aec2fb926&title=&width=1154",alt:"image.png"}})]),t._v(" "),a("ul",[a("li",[t._v("左边小空间用于存储新生代对象\n"),a("ul",[a("li",[t._v("64bit操作系统上不超过32M")]),t._v(" "),a("li",[t._v("32bit操作系统上不超过16M")])])]),t._v(" "),a("li",[t._v("右边较大空间用于存储老生代对象\n"),a("ul",[a("li",[t._v("64bit操作系统上不超过1.6G")]),t._v(" "),a("li",[t._v("32bit操作系统上不超过700M")])])])]),t._v(" "),a("h3",{attrs:{id:"新生代对象回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新生代对象回收"}},[t._v("#")]),t._v(" 新生代对象回收")]),t._v(" "),a("h4",{attrs:{id:"主要使用算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要使用算法"}},[t._v("#")]),t._v(" 主要使用算法")]),t._v(" "),a("p",[t._v("采用赋值算法 + 标记整理算法")]),t._v(" "),a("h4",{attrs:{id:"回收过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回收过程"}},[t._v("#")]),t._v(" 回收过程")]),t._v(" "),a("p",[t._v("新生代内存区分为两个等大小空间，使用空间为From，空闲空间为To。\n如果需要申请空间使用，回收步骤如下：")]),t._v(" "),a("ol",[a("li",[t._v("首先会将所有活动对象存储于From空间，这个过程中To是空闲状态。")]),t._v(" "),a("li",[t._v("当From空间使用到一定程度之后就会触发GC操作，这个时候会进行标记整理对活动对象进行标记并移动位置将使用空间变得连续，便于后续不会产生碎片化空间。")]),t._v(" "),a("li",[t._v("将活动对象拷贝至To空间，拷贝完成之后活动空间就有了备份，这个时候就可以考虑回收操作了。")]),t._v(" "),a("li",[t._v("把From空间完成释放，回收完成")]),t._v(" "),a("li",[t._v("对From和To名称进行调换，继续重复之前的操作。")])]),t._v(" "),a("p",[t._v("总结就是：\n使用From -> 触发GC标记整理 -> 拷贝到To -> 回收From -> 名称互换重复之前")]),t._v(" "),a("h4",{attrs:{id:"晋升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#晋升"}},[t._v("#")]),t._v(" 晋升")]),t._v(" "),a("p",[t._v("拷贝的过程中某个对象的指代在老生代空间，就可能出现晋升。 "),a("strong",[t._v("晋升就是将新生代对象移动至老生代。")]),t._v(" "),a("strong",[t._v("什么时候触发晋升操作?")])]),t._v(" "),a("ol",[a("li",[t._v("一轮GC之后还存活的新生代对象需要晋升")]),t._v(" "),a("li",[t._v("在拷贝过程中，To空间的使用率超过25%，将这次的活动对象都移动至老生代空间")])]),t._v(" "),a("p",[a("strong",[t._v("为什么是限制To的使用率呢?")]),t._v("\n将来回收操作是要把From空间的内容拷贝到To空间中进行交换，如果To的使用率太高，变成From之后新的对象就存不进去了。")]),t._v(" "),a("h3",{attrs:{id:"老生代对象回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老生代对象回收"}},[t._v("#")]),t._v(" 老生代对象回收")]),t._v(" "),a("h4",{attrs:{id:"主要使用算法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要使用算法-2"}},[t._v("#")]),t._v(" 主要使用算法")]),t._v(" "),a("p",[t._v("主要采用标记清除 "),a("strong",[t._v("（首要）")]),t._v(" 、标记整理、增量标记算法")]),t._v(" "),a("ul",[a("li",[t._v("标记清除：虽然使用标记清除会有空间碎片化的问题，但是标记清除提升的速度是很快的。")]),t._v(" "),a("li",[t._v("标记整理：在晋升的时候且老生代区域的空间也不够容纳的时候，就会采用标记整理进行 "),a("strong",[t._v("空间优化")]),t._v("。")]),t._v(" "),a("li",[t._v("增量标记：将一整段的垃圾回收操作标记拆分成多个小段完成回收，主要是为了实现程序和垃圾回收的交替完成，这样进行 "),a("strong",[t._v("效率优化")]),t._v(" 带来的时间消耗更加的合理。")])]),t._v(" "),a("p",[t._v("之前标记清除和整理的原理都在GC那篇文章中解释，这里就详情看看增量标记是如何工作的?")]),t._v(" "),a("h4",{attrs:{id:"标记增量如何优化垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记增量如何优化垃圾回收"}},[t._v("#")]),t._v(" 标记增量如何优化垃圾回收?")]),t._v(" "),a("p",[t._v("看图可以将垃圾回收分成两个部分，一个是程序的执行，一个是垃圾的回收。当垃圾回收的时候其实会阻塞程序的执行，所以中间会有空档期。\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/292785/1638257651837-6e2f8a66-208d-4f6c-9d13-49c10b1556b3.png#clientId=u0af62612-21ca-4&from=paste&height=428&id=u1036ae48&name=image.png&originHeight=856&originWidth=2622&originalType=binary&ratio=1&rotation=0&showTitle=false&size=802551&status=done&style=none&taskId=ufaf952d9-f6c3-47e1-ae1c-5b2e9854af0&title=&width=1311",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"新生代-vs-老生代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新生代-vs-老生代"}},[t._v("#")]),t._v(" 新生代 VS 老生代")]),t._v(" "),a("ul",[a("li",[t._v("新生代区域垃圾回收使用"),a("strong",[t._v("空间换时间")]),t._v(" "),a("ul",[a("li",[t._v("主要采用复制算法，要有空闲空间存在，当然新生代本身空间小，分出来的复制的空间更小，所以浪费这点空间换取时间的效率是微不足道的")])])]),t._v(" "),a("li",[t._v("老生代区域垃圾回收不适合复制算法，老生代空间大一分为二，会造成一半的空间浪费，存放数据多复制时间长。")])]),t._v(" "),a("h2",{attrs:{id:"什么时候触发cg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候触发cg"}},[t._v("#")]),t._v(" 什么时候触发CG")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/292785/1638258615854-45b25718-1860-419f-8d7b-6bc865c5b88b.png#clientId=u0af62612-21ca-4&from=paste&height=493&id=u3df3037f&name=image.png&originHeight=986&originWidth=2238&originalType=binary&ratio=1&rotation=0&showTitle=false&size=806151&status=done&style=none&taskId=u1e67a85a-f0ec-4e46-af44-07d99224d63&title=&width=1119",alt:"image.png"}}),t._v("\nps：全局变量程序执行完才会被回收   局部变量失去引用的时候会被回收")]),t._v(" "),a("h2",{attrs:{id:"优化内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化内存"}},[t._v("#")]),t._v(" 优化内存")]),t._v(" "),a("h3",{attrs:{id:"查看内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看内存"}},[t._v("#")]),t._v(" 查看内存")]),t._v(" "),a("ul",[a("li",[t._v("web  window.performance.memory")]),t._v(" "),a("li",[t._v("node  process.memoryUsage()")])]),t._v(" "),a("h3",{attrs:{id:"优化建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化建议"}},[t._v("#")]),t._v(" 优化建议")]),t._v(" "),a("ul",[a("li",[t._v("尽量不要定义全局变量  定义需要手动释放 a = null //  a = undefined")]),t._v(" "),a("li",[t._v("注意闭包")])]),t._v(" "),a("p",[t._v("传统的浏览器里面 垃圾回收是自动的\nnode可以手动触发垃圾回收 global.gc\nnode端可以设置内存  node --max-old-space-size=1700 test.js")])])}),[],!1,null,null,null);a.default=v.exports}}]);